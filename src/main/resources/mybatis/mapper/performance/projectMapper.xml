<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.alvinsite.demo.dao.performance.ProjectDao">
    <resultMap id="findLongitudinalProjectResult" type="LongitudinalProject">
        <id property="id" column="id" />
        <result property="nickname" column="nickname" />
        <result property="projectNum" column="projectNum" />


        <association property="type" javaType="ProjectType">
            <id property="id" column="typeId" />
            <result property="title" column="typeTitle" />
        </association>

        <association property="department" javaType="Department" >
            <id property="id" column="departmentId" />
            <result property="title" column="department" />
        </association>
        <collection property="members" ofType="ManagerUserDTO" column="projectNum"  select="findMembersById">
            <id property="account" column="account"/>
            <result property="nickname" column="nickname"/>
        </collection>
    </resultMap>

    <select id="findLongitudinalProject" parameterType="top.alvinsite.demo.model.params.PerformanceQuery" resultMap="findLongitudinalProjectResult">
        select
            gxky0107.id as id,
            gxky0101.id as projectNum,
            gxky0101.xmmc as title,
            gxky0117.bzm as typeId,
            gxky0117.flmc as typeTitle,
            gxky0101.xmjb as level,
            gxky0101.htjf as budget,
            gxjg0101.gh as account,
            gxjg0101.xm as nickname,
            department.id as departmentId,
            department.title as department,
            gxky0107.pxh as signedOrder,
            year(gxky0101.lxsj) as approvalProjectYear

        from gxky0107
        join gxky0101 on gxky0101.id = gxky0107.xmbh
        join gxjg0101 on gxjg0101.gh = gxky0107.xmzcyzgh
        join department on department.id = gxjg0101.dwh
        left join gxky0117 on gxky0101.xmflbh = gxky0117.bzm
        <where>
            gxky0101.xmxzbh = 0
            and gxky0101.shztbh = 2
            <if test="nickname != null">and gxjg0101.xm like concat('%', #{nickname}, '%')</if>
            <if test="account != null">and gxjg0101.gh like concat('%', #{account}, '%')</if>
            <if test="department != null">and department.title like concat('%', #{department}, '%')</if>
            <if test="departmentId != null">and gxjg0101.dwh = #{departmentId}</if>
            <if test="year != null">and year(gxky0101.lxsj) = #{year}</if>
        </where>
    </select>


    <resultMap id="findCrossingProjectResult" type="CrossingProject">
        <id property="id" column="id" />
        <result property="projectNum" column="projectNum" />
        <result property="title" column="title" />
        <result property="nickname" column="nickname" />
        <result property="contractType" column="contractType" />
        <result property="contractNum" column="contractNum" />
        <result property="budget" column="budget" />
        <result property="score" column="score" />


        <association property="department" javaType="Department" >
            <id property="id" column="departmentId" />
            <result property="title" column="department" />
        </association>
        <collection property="members" ofType="ManagerUserDTO" column="projectNum"  select="findMembersById">
            <id property="account" column="account"/>
            <result property="nickname" column="nickname"/>
        </collection>
    </resultMap>

    <select id="findCrossingProject" parameterType="top.alvinsite.demo.model.params.PerformanceQuery" resultMap="findCrossingProjectResult">
        select
            gxky0107.id as id,
            gxky0101.id as projectNum,
            gxky0101.xmmc as title,
            gxjg0101.gh as account,
            gxjg0101.xm as nickname,
            department.id as departmentId,
            department.title as department,
            DM_CONTRACT_TYPE.NAME as contractType,
            gxky0101.xmbh as contractNum,
            gxky0101.htjf as budget,
            gxky0107.pxh as signedOrder,
            year(gxky0101.lxsj) as approvalProjectYear
        from gxky0107
        join gxky0101 on gxky0101.id = gxky0107.xmbh
        join gxjg0101 on gxjg0101.gh = gxky0107.xmzcyzgh
        join department on department.id = gxjg0101.dwh
        LEFT JOIN DM_CONTRACT_TYPE ON DM_CONTRACT_TYPE.ID = gxky0101.htlx
        <where>
            gxky0101.xmxzbh = 1
            and gxky0101.shztbh = 2
            <if test="nickname != null">and gxjg0101.xm like concat('%', #{nickname}, '%')</if>
            <if test="account != null">and gxjg0101.gh like concat('%', #{account}, '%')</if>
            <if test="department != null">and department.title like concat('%', #{department}, '%')</if>
            <if test="departmentId != null">and gxjg0101.dwh = #{departmentId}</if>
            <if test="year != null">and year(gxky0101.lxsj) = #{year}</if>
        </where>
    </select>

    <select id="findMembersById"  parameterType="java.lang.String" resultType="ManagerUserDTO">
        SELECT DISTINCT
            gxjg0101.xm as nickname,
            gxjg0101.gh as account
        FROM gxky0107
                 join gxjg0101 on gxjg0101.gh = gxky0107.xmzcyzgh
        where
            gxky0107.xmbh = #{id} and
            gxky0107.zzlxbh = '1' # 筛选本校老师
        order by gxky0107.pxh
    </select>

</mapper>